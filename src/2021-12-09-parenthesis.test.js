/*
문제 설명
괄호가 바르게 짝지어졌다는 것은 '(' 문자로 열렸으면 반드시 짝지어서 ')' 문자로 닫혀야 한다는 뜻입니다. 올바른 괄호의 규칙은 다음과 같습니다.

빈 문자열은 올바른 괄호 문자열입니다.
A가 올바른 괄호 문자열이라면, (A)도 올바른 괄호 문자열입니다.
A와 B가 올바른 괄호 문자열이라면, AB도 올바른 괄호 문자열입니다.
예를 들면 "()()", "(())()"는 올바른 괄호입니다. 그러나, ")(", "())()"등은 올바르지 않은 괄호입니다.

괄호로만 이루어진 문자열이 담긴 두 배열이 있습니다. 각 배열에 담긴 문자열은 올바르거나, 혹은 올바르지 않은 괄호 문자열입니다. 배열의 예시는 다음과 같습니다.

arr1 = ["()", "(()", ")()", "()"]
arr2 = [")()", "()", "(()"]
이때, 각 배열에서 문자열을 하나씩 선택해 이어 붙여 올바른 괄호를 만드는 방법은 모두 몇 가지인지 세려 합니다. 단, 문자열을 이어 붙일 때는 반드시 arr1의 문자열이 앞에 오고, arr2의 문자열이 뒤에 와야 합니다. 또, 두 개를 이어 붙여 만든 괄호 문자열이 같더라도, arr1나 arr2에서 이전과는 다른 위치에 있는 문자열을 선택했다면 서로 다른 방법으로 세어야 합니다.

arr1에서 첫 번째 문자열 "()"를 선택하고, arr2에서 두 번째 문자열 "()"를 선택하여 이어 붙이면 "()()"로 올바른 괄호가 됩니다.
arr1에서 두 번째 문자열 "(()"를 선택하고, arr2에서 첫 번째 문자열 ")()"를 선택해 이어 붙이면 "(())()"로 올바른 괄호가 됩니다.
arr1에서 네 번째 문자열 "()"를 선택하고, arr2에서 두 번째 문자열 "()"를 선택하여 이어 붙이면 "()()"로 올바른 괄호가 됩니다.
괄호로만 이루어진 문자열이 담긴 배열 arr1, arr2가 매개변수로 주어질 때, 각 배열에서 문자열을 하나씩 선택해 이어 붙였을 때 올바른 괄호가 되는 방법은 몇 가지인지 return 하도록 solution 함수를 완성해주세요.

제한사항
arr1의 길이는 1 이상 100,000 이하입니다.
arr1의 원소는 '(' 또는 ')'로만 이루어진 문자열입니다.
각 문자열의 길이는 1 이상 9 이하입니다.
arr2의 길이는 1 이상 100,000 이하입니다.
arr2의 원소는 '(' 또는 ')'로만 이루어진 문자열입니다.
각 문자열의 길이는 1 이상 9 이하입니다.
arr1과 arr2에는 중복되는 문자열이 들어있을 수 있습니다.
입출력 예
arr1	arr2	result
["()", "(()", ")()", "()"]	[")()", "()", "(()"]	3
["()", "(()", "(", "(())"]	[")()","()", "(())", ")()"]	8
입출력 예 설명
입출력 예 #1

문제 예시와 같습니다.

입출력 예 #2

다음과 같이 8가지가 있습니다.

arr1[0] + arr2[1] → "()" + "()" → "()()"
arr1[0] + arr2[2] → "()" + "(())" → "()(())"
arr1[1] + arr2[0] → "(()" + ")()" → "(())()"
arr1[1] + arr2[3] → "(()" + ")()" → "(())()"
arr1[2] + arr2[0] → "(" + ")()" → "()()"
arr1[2] + arr2[3] → "(" + ")()" → "()()"
arr1[3] + arr2[1] → "(())" + "()" → "(())()"
arr1[3] + arr2[2] → "(())" + "(())" → "(())(())"
*/

function solution(arr1, arr2) {
  const nums1 = arr1.flatMap(str => {
    if(str.startsWith(')')){
      return []
    }
    let acc = 0
    for(let c of str){
      acc += (c === '(' ? 1 : -1)
      if(acc < 0){
        return []
      }
    }

    return [acc]
  })
  const nums2 = arr2.flatMap(str => {
    if(str.endsWith('(')){
      return []
    }
    let acc = 0
    for(let i=str.length -1; i >=0; i--){
      acc += (str[i] === ')' ? 1 : -1)
      if(acc < 0){
        return []
      }
    }

    return [acc]
  })

  const map = new Map()
  for(let num of nums2){
    map.set(num, map.has(num) ? (map.get(num) + 1) : 1)
  }

  let count = 0
  for(let num of nums1){
    if(map.has(num)){
      count += map.get(num)
    }
  }

  return count
}

test('parenthesis', () => {
  expect(solution(['()', '(()', ')()', '()'], [')()', '()', '(()'])).toEqual(3)
  expect(solution(['))((('], [')'])).toEqual(0)
  expect(solution(["()", "(()", "(", "(())"], [")()","()", "(())", ")()"])).toEqual(8)
  expect(solution(["("], ["))(()"])).toEqual(0)
})
